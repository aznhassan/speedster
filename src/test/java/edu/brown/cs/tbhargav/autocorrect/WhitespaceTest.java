/**
 * Part of the autocorrect testing package.
 */
package edu.brown.cs.tbhargav.autocorrect;

import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

import edu.brown.cs.tbhargav.autocorrect.WhitespaceGen;
import edu.brown.cs.tbhargav.fileparsers.ExtWordsFileParser;
import edu.brown.cs.tbhargav.tries.Trie;
import edu.brown.cs.tbhargav.tries.Word;

/**
 * Tests the whitespace suggestions generated by using a testing oracle.
 *
 * @author tbhargav
 *
 */
public class WhitespaceTest {
  @Test
  /**
   * Tests our whitespace suggestion
   * generator by feeding it merged
   * words and seeing if it can
   * separate them back again (form
   * of a testing oracle).
   */
  public void whitespaceTester() {
    WhitespaceGen gen = new WhitespaceGen();
    Trie<Word> trie = new Trie<Word>();
    ExtWordsFileParser fileParser = new ExtWordsFileParser("sherlock.txt");
    ArrayList<String> wordText = null;
    try {
      wordText = fileParser.readWords();
    } catch (IOException e) {
      fileParser.closeReader();
      e.printStackTrace();
    }
    HashMap<String, Word> dict = Word.makeWordsFromStrings(wordText);
    trie.addValues(dict.values());

    // We now iterate through many pairs of words
    // merging them together and feeding them to
    // the whitespace gen.
    String prev = "Sherlock";
    for (Word s : dict.values()) {
      String mergedWord = s.getStringText().concat(prev);

      boolean wordsFedFound = false;
      ArrayList<Word> wordsGen = (ArrayList<Word>) gen.getSuggestions(trie,
          mergedWord);

      for (int i = 0; i < wordsGen.size() - 1; i++) {
        if (wordsGen.get(i).getStringText().equalsIgnoreCase(s.getStringText())) {
          if (wordsGen.get(i + 1).getStringText().equalsIgnoreCase(prev)) {
            wordsFedFound = true;
          }
        }
      }
      assertTrue(wordsFedFound);
      prev = s.getStringText();
    }

  }
}
